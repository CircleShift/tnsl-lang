/##
	Copyright 2021-2022 Kyle Gunger

	This file is licensed under the CDDL 1.0 (the License)
	and may only be used in accordance with the License.
	You should have received a copy of the License with this
	software/source code. If you did not, a copy can be found
	at the following URL:

	https://opensource.org/licenses/CDDL-1.0

	THIS SOFTWARE/SOURCE CODE IS PROVIDED "AS IS" WITH NO
	WARRANTY, GUARANTEE, OR CLAIM OF FITNESS FOR ANY PURPOSE
	EXPRESS OR IMPLIED
#/

/; is_keyword_statement ({}charp word) [bool]
	;return string_equate(word, "struct") || string_equate(word, "interface") || string_equate(word, "enum") ||
			string_equate(word, "continue") || string_equate(word, "break") || string_equate(word, "label") ||
			string_equate(word, "goto") || string_equate(word, "virtual") || string_equate(word, "asm") ||
			string_equate(word, "delete")
;/

/; is_closing (Token t) [bool]
	/; if (t.token_type == TOKEN_TYPE.DELIMIT)
		;return string_equate(t.data`, ")") || string_equate(t.data`, "]") || string_equate(t.data`, "}")
	;/
	;return false
;/

/; get_closing (~{}Token tokens, int i) [int]
	;{}charp end = ")"
	/; if (string_equate(tokens`{i}.data`, "["))
		;end = "]"
	;; else if (string_equate(tokens`{i}.data`, "{"))
		;end = "}"
	;/

	;int delims = 0

	/; loop (i++; i < len tokens`) [i++]
		/; if (is_closing(tokens`{i}))
			/; if (delims > 0)
				;delims--
			;; else if (string_equate(end, tokens`{i}.data`))
				;return i
			;; else
				;return -1
			;/
		;; else if (tokens`{i}.token_type == TOKEN_TYPE.DELIMIT)
			;delims++
		;/
	;/

	;return -1
;/


/; is_definition (~{}Token tokens, ~int i) [bool]

	/; loop (int j = i`; j < len tokens`) [j++]
		/; if (tokens`{j}.token_type == TOKEN_TYPE.KEYTYPE)

		;; else if ()
		;/
	;/
	;return false
;/

/; tree_keyword_statement (~{}Token tokens, ~int i) [Node]
	;Token def_tok = {TOKEN_TYPE.KEYWORD, 0, 0, ~CNULL}
	;{}Node def_sub = {}

	;return {def_tok, ~def_sub}
;/

/; tree_statement (~{}Token tokens, ~int i) [Node]
	;i`++
	/; if (i` !< len tokens`)
		;return make_null_node()
	
	;; else if (is_keyword_statement(tokens`{i`}.data`))
		;return tree_keyword_statement(tokens, i)

	;; else if (is_definition(tokens, i))
		;return tree_definition(tokens, i)

	;/
	
	;return tree_value(tokens, i)
;/

/; tree_preproc [Node]

;/